// Code generated by protoc-gen-go. DO NOT EDIT.
// source: HouseContractListOutput.proto

package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BaseOutput struct {
	IsSuccess    bool   `protobuf:"varint,1,opt,name=IsSuccess" json:"IsSuccess,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
	ErrorCode    string `protobuf:"bytes,3,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
}

func (m *BaseOutput) Reset()                    { *m = BaseOutput{} }
func (m *BaseOutput) String() string            { return proto.CompactTextString(m) }
func (*BaseOutput) ProtoMessage()               {}
func (*BaseOutput) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *BaseOutput) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *BaseOutput) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *BaseOutput) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

type HouseContractListDto struct {
	ContractId        int32   `protobuf:"varint,1,opt,name=ContractId" json:"ContractId,omitempty"`
	ContractCode      string  `protobuf:"bytes,2,opt,name=ContractCode" json:"ContractCode,omitempty"`
	CompanyId         int64   `protobuf:"varint,3,opt,name=CompanyId" json:"CompanyId,omitempty"`
	CompanyName       string  `protobuf:"bytes,4,opt,name=CompanyName" json:"CompanyName,omitempty"`
	RegCapital        string  `protobuf:"bytes,5,opt,name=RegCapital" json:"RegCapital,omitempty"`
	ComSignName       string  `protobuf:"bytes,6,opt,name=ComSignName" json:"ComSignName,omitempty"`
	LinkNamePhone     string  `protobuf:"bytes,7,opt,name=LinkNamePhone" json:"LinkNamePhone,omitempty"`
	UnixEstiblishTime int64   `protobuf:"varint,8,opt,name=UnixEstiblishTime" json:"UnixEstiblishTime,omitempty"`
	StatusId          int32   `protobuf:"varint,9,opt,name=StatusId" json:"StatusId,omitempty"`
	Longitude         float64 `protobuf:"fixed64,10,opt,name=Longitude" json:"Longitude,omitempty"`
	Latitude          float64 `protobuf:"fixed64,11,opt,name=Latitude" json:"Latitude,omitempty"`
	UnixCreateTime    int64   `protobuf:"varint,12,opt,name=UnixCreateTime" json:"UnixCreateTime,omitempty"`
	IsFastSign        int32   `protobuf:"varint,13,opt,name=IsFastSign" json:"IsFastSign,omitempty"`
	CompanyLogo       string  `protobuf:"bytes,14,opt,name=CompanyLogo" json:"CompanyLogo,omitempty"`
}

func (m *HouseContractListDto) Reset()                    { *m = HouseContractListDto{} }
func (m *HouseContractListDto) String() string            { return proto.CompactTextString(m) }
func (*HouseContractListDto) ProtoMessage()               {}
func (*HouseContractListDto) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *HouseContractListDto) GetContractId() int32 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

func (m *HouseContractListDto) GetContractCode() string {
	if m != nil {
		return m.ContractCode
	}
	return ""
}

func (m *HouseContractListDto) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *HouseContractListDto) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *HouseContractListDto) GetRegCapital() string {
	if m != nil {
		return m.RegCapital
	}
	return ""
}

func (m *HouseContractListDto) GetComSignName() string {
	if m != nil {
		return m.ComSignName
	}
	return ""
}

func (m *HouseContractListDto) GetLinkNamePhone() string {
	if m != nil {
		return m.LinkNamePhone
	}
	return ""
}

func (m *HouseContractListDto) GetUnixEstiblishTime() int64 {
	if m != nil {
		return m.UnixEstiblishTime
	}
	return 0
}

func (m *HouseContractListDto) GetStatusId() int32 {
	if m != nil {
		return m.StatusId
	}
	return 0
}

func (m *HouseContractListDto) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *HouseContractListDto) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *HouseContractListDto) GetUnixCreateTime() int64 {
	if m != nil {
		return m.UnixCreateTime
	}
	return 0
}

func (m *HouseContractListDto) GetIsFastSign() int32 {
	if m != nil {
		return m.IsFastSign
	}
	return 0
}

func (m *HouseContractListDto) GetCompanyLogo() string {
	if m != nil {
		return m.CompanyLogo
	}
	return ""
}

type HouseContractListOutput struct {
	BaseOutput       *BaseOutput             `protobuf:"bytes,1,opt,name=BaseOutput" json:"BaseOutput,omitempty"`
	TotalRow         int32                   `protobuf:"varint,2,opt,name=TotalRow" json:"TotalRow,omitempty"`
	ContractListDtos []*HouseContractListDto `protobuf:"bytes,3,rep,name=ContractListDtos" json:"ContractListDtos,omitempty"`
}

func (m *HouseContractListOutput) Reset()                    { *m = HouseContractListOutput{} }
func (m *HouseContractListOutput) String() string            { return proto.CompactTextString(m) }
func (*HouseContractListOutput) ProtoMessage()               {}
func (*HouseContractListOutput) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *HouseContractListOutput) GetBaseOutput() *BaseOutput {
	if m != nil {
		return m.BaseOutput
	}
	return nil
}

func (m *HouseContractListOutput) GetTotalRow() int32 {
	if m != nil {
		return m.TotalRow
	}
	return 0
}

func (m *HouseContractListOutput) GetContractListDtos() []*HouseContractListDto {
	if m != nil {
		return m.ContractListDtos
	}
	return nil
}

func init() {
	proto.RegisterType((*BaseOutput)(nil), "example.BaseOutput")
	proto.RegisterType((*HouseContractListDto)(nil), "example.HouseContractListDto")
	proto.RegisterType((*HouseContractListOutput)(nil), "example.HouseContractListOutput")
}

func init() { proto.RegisterFile("HouseContractListOutput.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x5f, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0x15, 0xc2, 0xb6, 0xd9, 0x49, 0x5b, 0x81, 0x41, 0xc2, 0xaa, 0x28, 0x8a, 0x22, 0x84,
	0xf2, 0x80, 0xf6, 0xa1, 0xbd, 0x01, 0xa1, 0x88, 0x48, 0xe1, 0x8f, 0xbc, 0xe5, 0x00, 0xee, 0xc6,
	0x4a, 0x2d, 0x92, 0x38, 0x8a, 0x27, 0xa2, 0x1c, 0x8c, 0x7b, 0x71, 0x04, 0xe4, 0xd9, 0x6c, 0x92,
	0xed, 0xd2, 0xb7, 0xcc, 0x6f, 0xc6, 0xdf, 0x8c, 0xc7, 0x5f, 0xe0, 0xe2, 0xb3, 0xe9, 0xad, 0x4a,
	0x4d, 0x83, 0x9d, 0xdc, 0x60, 0xae, 0x2d, 0x7e, 0xeb, 0xb1, 0xed, 0x71, 0xd5, 0x76, 0x06, 0x0d,
	0x3b, 0x56, 0xf7, 0xb2, 0x6e, 0x2b, 0x15, 0x57, 0x00, 0x1f, 0xa4, 0x55, 0xdb, 0x24, 0x7b, 0x0d,
	0xcb, 0xcc, 0xae, 0xfb, 0xcd, 0x46, 0x59, 0xcb, 0xbd, 0xc8, 0x4b, 0x02, 0x31, 0x01, 0x16, 0xc3,
	0xc9, 0x75, 0xd7, 0x99, 0xee, 0x8b, 0xb2, 0x56, 0x96, 0x8a, 0x3f, 0x89, 0xbc, 0x64, 0x29, 0xf6,
	0x98, 0x53, 0xa0, 0x38, 0x35, 0x85, 0xe2, 0x3e, 0x15, 0x4c, 0x20, 0xfe, 0xeb, 0xc3, 0xcb, 0x83,
	0xc1, 0x3e, 0xa2, 0x61, 0x6f, 0x00, 0x76, 0x28, 0x2b, 0xa8, 0xf3, 0x42, 0xcc, 0x88, 0x6b, 0xbd,
	0x8b, 0x48, 0x79, 0x68, 0x3d, 0x67, 0xae, 0x75, 0x6a, 0xea, 0x56, 0x36, 0xbf, 0xb3, 0x82, 0x5a,
	0xfb, 0x62, 0x02, 0x2c, 0x82, 0x70, 0x08, 0xbe, 0xca, 0x5a, 0xf1, 0xa7, 0x24, 0x30, 0x47, 0x6e,
	0x06, 0xa1, 0xca, 0x54, 0xb6, 0x1a, 0x65, 0xc5, 0x17, 0x54, 0x30, 0x23, 0x83, 0xc2, 0x5a, 0x97,
	0x0d, 0x29, 0x1c, 0x8d, 0x0a, 0x3b, 0xc4, 0xde, 0xc2, 0x69, 0xae, 0x9b, 0x9f, 0xee, 0xfb, 0xfb,
	0x9d, 0x69, 0x14, 0x3f, 0xa6, 0x9a, 0x7d, 0xc8, 0xde, 0xc3, 0xf3, 0x1f, 0x8d, 0xbe, 0xbf, 0xb6,
	0xa8, 0x6f, 0x2b, 0x6d, 0xef, 0x6e, 0x74, 0xad, 0x78, 0x40, 0xf3, 0x1e, 0x26, 0xd8, 0x39, 0x04,
	0x6b, 0x94, 0xd8, 0xdb, 0xac, 0xe0, 0x4b, 0xda, 0xcb, 0x18, 0xbb, 0x1b, 0xe7, 0xa6, 0x29, 0x35,
	0xf6, 0x85, 0xe2, 0x10, 0x79, 0x89, 0x27, 0x26, 0xe0, 0x4e, 0xe6, 0x12, 0xb7, 0xc9, 0x90, 0x92,
	0x63, 0xcc, 0xde, 0xc1, 0x99, 0x6b, 0x95, 0x76, 0x4a, 0xa2, 0xa2, 0x01, 0x4e, 0x68, 0x80, 0x07,
	0xd4, 0xed, 0x24, 0xb3, 0x9f, 0xa4, 0x45, 0x77, 0x47, 0x7e, 0xba, 0x7d, 0x97, 0x89, 0xcc, 0xb6,
	0x9a, 0x9b, 0xd2, 0xf0, 0xb3, 0xbd, 0xad, 0x3a, 0x14, 0xff, 0xf1, 0xe0, 0xd5, 0x23, 0x5e, 0x64,
	0x57, 0x73, 0xf3, 0xd1, 0xab, 0x87, 0x97, 0x2f, 0x56, 0x83, 0x35, 0x57, 0x53, 0x4a, 0xcc, 0x3d,
	0x7a, 0x0e, 0xc1, 0x8d, 0x41, 0x59, 0x09, 0xf3, 0x8b, 0x6c, 0xb0, 0x10, 0x63, 0xcc, 0x32, 0x78,
	0xf6, 0xc0, 0x59, 0x96, 0xfb, 0x91, 0x9f, 0x84, 0x97, 0x17, 0xa3, 0xec, 0xff, 0xfc, 0x27, 0x0e,
	0x8e, 0xdd, 0x1e, 0xd1, 0x8f, 0x72, 0xf5, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x46, 0x77, 0xed,
	0x49, 0x03, 0x00, 0x00,
}
